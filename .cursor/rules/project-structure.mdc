---
description: project-structure
globs: 
alwaysApply: false
---
# Project Structure Guide

Organization of TypeScript project files and modules for Node.js backend applications, particularly trading APIs and financial services.

## Directory Structure

### Recommended Project Layout
```
project-root/
├── src/                          # Source code
│   ├── app.ts                    # Express app configuration
│   ├── server.ts                 # Server entry point
│   ├── controllers/              # HTTP request handlers
│   │   ├── binance.controller.ts
│   │   ├── websocket.controller.ts
│   │   └── health.controller.ts
│   ├── services/                 # Business logic layer
│   │   ├── binance/              # Binance integration
│   │   │   ├── index.ts
│   │   │   ├── usdm-rest.ts
│   │   │   ├── usdm-websocket.ts
│   │   │   ├── coinm-rest.ts
│   │   │   ├── coinm-websocket.ts
│   │   │   └── spot-rest.ts
│   │   ├── validation/           # Input validation
│   │   ├── notification/         # Notification services
│   │   └── risk/                 # Risk management
│   ├── middleware/               # Express middleware
│   │   ├── auth.middleware.ts
│   │   ├── cors.middleware.ts
│   │   ├── error.middleware.ts
│   │   ├── logging.middleware.ts
│   │   └── validation.middleware.ts
│   ├── routes/                   # API route definitions
│   │   ├── index.ts
│   │   ├── binance.routes.ts
│   │   ├── health.routes.ts
│   │   └── websocket.routes.ts
│   ├── types/                    # TypeScript type definitions
│   │   ├── api.types.ts
│   │   ├── binance.types.ts
│   │   ├── common.types.ts
│   │   └── websocket.types.ts
│   ├── utils/                    # Utility functions
│   │   ├── logger.ts
│   │   ├── config.ts
│   │   ├── helpers.ts
│   │   └── validators.ts
│   ├── config/                   # Configuration files
│   │   ├── database.ts
│   │   ├── environment.ts
│   │   └── constants.ts
│   └── __tests__/                # Test files
│       ├── unit/
│       ├── integration/
│       └── fixtures/
├── dist/                         # Compiled JavaScript (build output)
├── docs/                         # Documentation
│   ├── API_ENDPOINTS.md
│   ├── DEPLOYMENT.md
│   └── DEVELOPMENT.md
├── scripts/                      # Build and deployment scripts
│   ├── build.sh
│   ├── deploy.sh
│   └── test.sh
├── .env.example                  # Environment variables template
├── .gitignore                    # Git ignore rules
├── .dockerignore                 # Docker ignore rules
├── Dockerfile                    # Docker configuration
├── docker-compose.yml            # Docker Compose configuration
├── package.json                  # Node.js dependencies and scripts
├── tsconfig.json                 # TypeScript configuration
├── jest.config.js                # Jest testing configuration
├── .eslintrc.js                  # ESLint configuration
├── .prettierrc                   # Prettier configuration
└── README.md                     # Project documentation
```

## File Naming Conventions

### TypeScript Files
```typescript
// ✅ Good - Descriptive, kebab-case naming
src/services/binance/usdm-websocket.ts
src/controllers/binance.controller.ts
src/middleware/auth.middleware.ts
src/types/api.types.ts
src/utils/price-calculator.ts

// ❌ Avoid - Unclear or inconsistent naming
src/services/ws.ts
src/controllers/BinanceController.ts
src/middleware/auth_middleware.ts
src/types/Types.ts
```

### Test Files
```typescript
// ✅ Good - Clear test file naming
src/__tests__/unit/services/binance.service.test.ts
src/__tests__/integration/api/orders.integration.test.ts
src/__tests__/fixtures/mock-data.ts

// Test file structure mirrors source structure
src/services/binance/index.ts
src/__tests__/unit/services/binance/index.test.ts
```

## Module Organization

### Service Module Structure
```typescript
// ✅ Good - Well-organized service module
// src/services/binance/index.ts
export { default as BinanceService } from './binance.service';
export { BinanceUsdMWebSocketManager } from './usdm-websocket';
export { BinanceUsdMRestAPI } from './usdm-rest';
export { BinanceCoinMWebSocketManager } from './coinm-websocket';
export { BinanceCoinMRestAPI } from './coinm-rest';
export * from './types';

// src/services/binance/binance.service.ts
import { BinanceUsdMRestAPI } from './usdm-rest';
import { BinanceUsdMWebSocketManager } from './usdm-websocket';
import { BinanceCoinMRestAPI } from './coinm-rest';
import { BinanceCoinMWebSocketManager } from './coinm-websocket';

export default class BinanceService {
  private usdMRestAPI: BinanceUsdMRestAPI;
  private usdMWsManager: BinanceUsdMWebSocketManager;
  private coinMRestAPI: BinanceCoinMRestAPI;
  private coinMWsManager: BinanceCoinMWebSocketManager;

  constructor() {
    this.usdMRestAPI = new BinanceUsdMRestAPI();
    this.usdMWsManager = new BinanceUsdMWebSocketManager();
    this.coinMRestAPI = new BinanceCoinMRestAPI();
    this.coinMWsManager = new BinanceCoinMWebSocketManager();
  }
}
```

### Type Definitions Organization
```typescript
// ✅ Good - Organized type definitions
// src/types/api.types.ts
export interface ApiResponse<T = any> {
  success: boolean;
  data?: T;
  error?: string;
  timestamp?: number;
}

export interface PaginatedResponse<T> extends ApiResponse<T[]> {
  pagination: {
    page: number;
    limit: number;
    total: number;
    hasNext: boolean;
  };
}

// src/types/binance.types.ts
export interface Position {
  symbol: string;
  positionAmount: number;
  entryPrice: number;
  unrealizedProfit: number;
  marginType: 'cross' | 'isolated';
  contractType: 'USDM' | 'COINM';
}

export interface OrderData {
  symbol: string;
  side: 'BUY' | 'SELL';
  type: 'MARKET' | 'LIMIT';
  quantity: number;
  price?: number;
  timeInForce?: 'GTC' | 'IOC' | 'FOK';
}

// src/types/index.ts - Barrel export
export * from './api.types';
export * from './binance.types';
export * from './common.types';
export * from './websocket.types';
```

## Configuration Management

### Environment Configuration
```typescript
// ✅ Good - Centralized configuration
// src/config/environment.ts
interface Config {
  port: number;
  nodeEnv: string;
  binance: {
    apiKey: string;
    apiSecret: string;
    testnet: boolean;
  };
  cors: {
    origin: string[];
    credentials: boolean;
  };
  logging: {
    level: string;
    format: string;
  };
  rateLimit: {
    windowMs: number;
    max: number;
  };
}

const config: Config = {
  port: parseInt(process.env.PORT || '3000'),
  nodeEnv: process.env.NODE_ENV || 'development',
  binance: {
    apiKey: process.env.BINANCE_API_KEY!,
    apiSecret: process.env.BINANCE_API_SECRET!,
    testnet: process.env.BINANCE_TESTNET === 'true',
  },
  cors: {
    origin: process.env.CORS_ORIGINS?.split(',') || ['*'],
    credentials: true,
  },
  logging: {
    level: process.env.LOG_LEVEL || 'info',
    format: process.env.LOG_FORMAT || 'json',
  },
  rateLimit: {
    windowMs: parseInt(process.env.RATE_LIMIT_WINDOW || '900000'), // 15 minutes
    max: parseInt(process.env.RATE_LIMIT_MAX || '100'),
  },
};

export default config;

// Validation
function validateConfig(): void {
  const required = ['BINANCE_API_KEY', 'BINANCE_API_SECRET'];
  const missing = required.filter(key => !process.env[key]);
  
  if (missing.length > 0) {
    throw new Error(`Missing required environment variables: ${missing.join(', ')}`);
  }
}

validateConfig();
```

### Constants Organization
```typescript
// ✅ Good - Well-organized constants
// src/config/constants.ts
export const API_ENDPOINTS = {
  BINANCE: {
    USDM: {
      ACCOUNT: '/api/binance/account',
      POSITIONS: '/api/binance/positions',
      ORDERS: '/api/binance/orders',
    },
    COINM: {
      ACCOUNT: '/api/binance/coinm/account',
      POSITIONS: '/api/binance/coinm/positions',
      ORDERS: '/api/binance/coinm/orders',
    },
    SPOT: {
      ACCOUNT: '/api/binance/spot/account',
      BALANCES: '/api/binance/spot/balances',
      ORDERS: '/api/binance/spot/orders',
    },
  },
  WEBSOCKET: '/ws',
  HEALTH: '/health',
} as const;

export const WEBSOCKET_MESSAGE_TYPES = {
  CONNECTION: 'connection',
  HEARTBEAT: 'heartbeat',
  POSITIONS_UPDATE: 'positions_update',
  BALANCE_UPDATE: 'balance_update',
  ORDER_UPDATE: 'order_update',
  ERROR: 'error',
} as const;

export const ORDER_STATUSES = {
  PENDING: 'PENDING',
  NEW: 'NEW',
  PARTIALLY_FILLED: 'PARTIALLY_FILLED',
  FILLED: 'FILLED',
  CANCELED: 'CANCELED',
  REJECTED: 'REJECTED',
  EXPIRED: 'EXPIRED',
} as const;
```

## Build and Deployment Structure

### Package.json Scripts
```json
{
  "name": "binance-trading-api",
  "version": "1.0.0",
  "scripts": {
    "dev": "nodemon src/server.ts",
    "build": "tsc && tsc-alias",
    "start": "node dist/server.js",
    "test": "jest",
    "test:watch": "jest --watch",
    "test:coverage": "jest --coverage",
    "lint": "eslint src/**/*.ts",
    "lint:fix": "eslint src/**/*.ts --fix",
    "format": "prettier --write src/**/*.ts",
    "type-check": "tsc --noEmit",
    "clean": "rimraf dist",
    "docker:build": "docker build -t binance-api .",
    "docker:run": "docker run -p 3000:3000 binance-api"
  },
  "dependencies": {
    "express": "^4.18.2",
    "cors": "^2.8.5",
    "helmet": "^7.0.0",
    "express-rate-limit": "^6.8.1",
    "ws": "^8.13.0",
    "binance": "^2.11.0",
    "joi": "^17.9.2",
    "winston": "^3.10.0"
  },
  "devDependencies": {
    "@types/node": "^20.4.2",
    "@types/express": "^4.17.17",
    "@types/cors": "^2.8.13",
    "@types/ws": "^8.5.5",
    "@types/jest": "^29.5.3",
    "typescript": "^5.1.6",
    "ts-node": "^10.9.1",
    "nodemon": "^3.0.1",
    "jest": "^29.6.1",
    "ts-jest": "^29.1.1",
    "eslint": "^8.45.0",
    "@typescript-eslint/eslint-plugin": "^6.2.0",
    "@typescript-eslint/parser": "^6.2.0",
    "prettier": "^3.0.0",
    "rimraf": "^5.0.1",
    "tsc-alias": "^1.8.7"
  }
}
```

### TypeScript Configuration
```json
// tsconfig.json
{
  "compilerOptions": {
    "target": "ES2020",
    "module": "commonjs",
    "lib": ["ES2020"],
    "outDir": "./dist",
    "rootDir": "./src",
    "strict": true,
    "esModuleInterop": true,
    "skipLibCheck": true,
    "forceConsistentCasingInFileNames": true,
    "resolveJsonModule": true,
    "declaration": true,
    "declarationMap": true,
    "sourceMap": true,
    "removeComments": true,
    "noImplicitAny": true,
    "noImplicitReturns": true,
    "noImplicitThis": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "exactOptionalPropertyTypes": true,
    "baseUrl": "./src",
    "paths": {
      "@/*": ["./*"],
      "@/types/*": ["./types/*"],
      "@/services/*": ["./services/*"],
      "@/utils/*": ["./utils/*"],
      "@/config/*": ["./config/*"]
    }
  },
  "include": ["src/**/*"],
  "exclude": ["node_modules", "dist", "**/*.test.ts", "**/*.spec.ts"]
}
```

### Docker Configuration
```dockerfile
# Dockerfile
FROM node:18-alpine AS builder

WORKDIR /app

# Copy package files
COPY package*.json ./
RUN npm ci --only=production

# Copy source code
COPY . .

# Build application
RUN npm run build

# Production stage
FROM node:18-alpine AS production

WORKDIR /app

# Copy built application
COPY --from=builder /app/dist ./dist
COPY --from=builder /app/node_modules ./node_modules
COPY --from=builder /app/package*.json ./

# Create non-root user
RUN addgroup -g 1001 -S nodejs
RUN adduser -S nodejs -u 1001

USER nodejs

EXPOSE 3000

CMD ["node", "dist/server.js"]
```

## Documentation Structure

### API Documentation
```markdown
# docs/API_ENDPOINTS.md
# API Endpoints Documentation

## USD-M Futures Endpoints

### Account Information
- **GET** `/api/binance/account`
- **Description**: Get USD-M futures account information
- **Response**: Account balance and margin information

### Positions
- **GET** `/api/binance/positions`
- **Description**: Get all USD-M futures positions
- **Response**: Array of position objects

## COIN-M Futures Endpoints

### Account Information
- **GET** `/api/binance/coinm/account`
- **Description**: Get COIN-M futures account information

## WebSocket Endpoints

### Connection
- **WS** `/ws`
- **Description**: WebSocket connection for real-time data
```

## Best Practices Summary

1. **Use consistent directory structure across projects**
2. **Follow clear naming conventions for files and folders**
3. **Organize modules with barrel exports**
4. **Centralize configuration management**
5. **Separate concerns with layered architecture**
6. **Use TypeScript path mapping for clean imports**
7. **Maintain comprehensive documentation**
8. **Structure tests to mirror source code**
9. **Use environment-specific configurations**
10. **Implement proper build and deployment scripts**
